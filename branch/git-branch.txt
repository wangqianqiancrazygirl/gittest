1. git branch <branch-name>   // 新建一个分支 (HEAD指向master)

2. git checkout  <branch -name>   // 切换分支  (这样HEAD就指向testing分支了)   （切换分之前 最好保证干净）

（分支切换会改变你工作目录中的文件 在切换分支时，一定要注意你工作目录里的文件会被改变。如果是切换到一个较 旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。如果Git不能 干净利落地完成这个任务，它将禁止切换分支。）

/**
 *  HEAD指向当前所在的分支 
 */

3. git checkout -b <branch-name>  // 创建新分支并且直接切换到该分支

// git branch <branch-name>
// git checkout <branch-name>   

4. git merge <branch-name>   // 合并该分支到当前所在分支

（在合并的时候，你应该注意到了"快进（fast-forward）"这个词。由于当前master分支所指 向的提交是你当前提交（有关hotfix的提交）的直接上游，所以Git只是简单的将指针向前移 动。换句话说，当你试图合并两个分支时，如果顺着一个分支走下去能够到达另一个分支， 那么Git在合并两者的时候，只会简单的将指针向前推进（指针右移），因为这种情况下的合 并操作没有需要解决的分歧――这就叫做“快进（fast-forward）”。）

5.git branch -d <branch-name>  // 删除该分支

6. git branch  // 查看所有分支列表

（注意master分支前的*字符：它代表现在检出的那一个分支（也就是说，当前HEAD指 针所指向的分支）。	这意味着如果在这时候提交，master分支将会随着新的工作向前移 动。）

7. git branch -v	// 列出所有分支 以及每一个分支的最后一次提交

8. git branch --merged   // 查看合并到当前分支的分支

（在这个列表中分支名字前没 有	*号的分支通常可以使用git branch -d 删除掉；你已经将它们的工作整合到了另一个 分支，所以并不会失去任何东西。）

9. git branch --no-merged

 (没合并的一般都是正在进行的功能或者需求 还没有完成 使用 git branch -d <branch-name> 不能删除
除非是整个需求不要了 删除整个分支 git branch -D <branch-name>)

遇到冲突时的分支合并 

有时候合并操作不会如此顺利。如果你在两个不同的分支中，对同一个文件的同一个部分进 行了不同的修改，Git就没法干净的合并它们。如果你对#53问题的修改和有关hotfix的 修改都涉及到同一个文件的同一处，在合并它们的时候就会产生合并冲突：
$git merge iss53 
Auto-merging index.html 
CONFLICT(content):Merge conflict in index.html 
Automatic merge failed; fix conflicts and then commit the result.
此时Git做了合并，但是没有自动地创建一个新的合并提交。Git会暂停下来，等待你去解决 合并产生的冲突。你可以在合并冲突后的任意时刻使用gitstatus命令来查看那些因包含 合并冲突而处于未合并（unmerged）状态的文件：
$git status 
On branch master You have unmerged paths.(fix conflicts and run "git commit")
Unmerged paths:(use"git add <file>..."to mark resolution)
both modified:index.html
no changes added to commit(use"git add "and/or" git commit -a")
任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。Git会在有冲突的文件 中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。出现 冲突的文件会包含一些特殊区段，看起来像下面这个样子：
<<<<<<<HEAD:index.html <divid="footer">contact:email.support@github.com</div> ======= <divid="footer">pleasecontactusatsupport@github.com </div> >>>>>>>iss53:index.html
这表示HEAD所指示的版本（也就是你的master分支所在的位置，因为你在运行merge命 令的时候已经检出到了这个分支）在这个区段的上半部分（=======的上半部分），而iss53分支所指示的版本在=======的下半部分。为了解决冲突，你必须选择使用由=======分割的两部分中的一个，或者你也可以自行合并这些内容。例如，你可以通过把这 段内容换成下面的样子来解决冲突：
分支的新建与合并
82
<divid="footer"> pleasecontactusatemail.support@github.com </div>
上述的冲突解决方案仅保留了其中一个分支的修改，并且<<<<<<<,=======,和>>>>>>>这些行被完全删除了。在你解决了所有文件里的冲突之后，对每个文件使用gitadd命令来 将其标记为冲突已解决。一旦暂存这些原本有冲突的文件，Git就会将它们标记为冲突已解 决。





分支切换会改变你工作目录中的文件 在切换分支时，一定要注意你工作目录里的文件会被改变。如果是切换到一个较 旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。如果Git不能 干净利落地完成这个任务，它将禁止切换分支。
